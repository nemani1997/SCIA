{
	"info": {
		"_postman_id": "e229698a-8dc1-458d-a641-1bd7fe0c267a",
		"name": "SCIA Integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15524111"
	},
	"item": [
		{
			"name": "Members",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{schema}}://{{host}}/scia/members/{{user}}",
					"protocol": "{{schema}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"scia",
						"members",
						"{{user}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_signed}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// JWT generation script adapted from",
					"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
					"",
					"var jwtSecret = pm.environment.get('jwt_secret') || ''",
					"",
					"// Set headers for JWT",
					"var header = {",
					"\t'typ': 'JWT',",
					"\t'alg': 'HS256'",
					"};",
					"",
					"// Prepare timestamp in seconds",
					"var currentTimestamp = Math.floor(Date.now() / 1000)",
					"",
					"var data = {",
					"\t'iss': pm.environment.get('jwt_iss') || '',",
					"\t'iat': currentTimestamp,",
					"\t'exp': currentTimestamp + 3600 // expiry time is 30 seconds from time of creation",
					"}",
					"",
					"",
					"function base64url(source) {",
					"    // Encode in classical base64",
					"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
					"    ",
					"    // Remove padding equal characters",
					"    encodedSource = encodedSource.replace(/=+$/, '')",
					"    ",
					"    // Replace characters according to base64url specifications",
					"    encodedSource = encodedSource.replace(/\\+/g, '-')",
					"    encodedSource = encodedSource.replace(/\\//g, '_')",
					"    ",
					"    return encodedSource",
					"}",
					"",
					"// encode header",
					"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
					"var encodedHeader = base64url(stringifiedHeader)",
					"",
					"// encode data",
					"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
					"var encodedData = base64url(stringifiedData)",
					"",
					"// build token",
					"var token = `${encodedHeader}.${encodedData}`",
					"",
					"// sign token",
					"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
					"signature = base64url(signature)",
					"var signedToken = `${token}.${signature}`",
					"",
					"pm.environment.set('jwt_signed', signedToken)",
					"console.log('Signed and encoded JWT', signedToken)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schema",
			"value": "https",
			"type": "string"
		},
		{
			"key": "host",
			"value": "stage-rcapi.tcheetah07.com",
			"type": "string"
		},
		{
			"key": "user",
			"value": "diana.chu@redcross.org",
			"type": "string"
		}
	]
}